#include <stdio.h>
#include <windows.h>
#include "tlhelp32.h"

BOOL ShellExcuteFunc(HWND hWnd, LPTSTR lpFile, LPTSTR lpParameters)
{
    SHELLEXECUTEINFO si;
    ZeroMemory(&si, sizeof(si));

    si.cbSize = sizeof(SHELLEXECUTEINFOW);
    si.hwnd = hWnd;
    si.fMask = SEE_MASK_FLAG_DDEWAIT | SEE_MASK_FLAG_NO_UI;
    si.lpVerb = TEXT("runas");
    si.lpFile = lpFile;
    si.lpParameters = lpParameters;
    si.nShow = SW_SHOWNORMAL;

    if (!ShellExecuteEx(&si)) {
        return FALSE;

    }
    return TRUE;
}

bool levelup(int pPid)
{
    HANDLE hToken = NULL;
    LUID luid;
    TOKEN_PRIVILEGES tp;

    HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pPid);

    if (OpenProcessToken(hProc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        if (LookupPrivilegeValue(NULL, "SeDebugPrivilege", &luid)) {
            tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
            tp.Privileges[0].Luid = luid;
            tp.PrivilegeCount = 1;

            if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
                printf("AdjustTokenPrivileges error: %u\n", GetLastError());
                return FALSE;
            }
            if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
                printf("The token does not have the specified privilege. \n");
                return FALSE;
            }
            return true;
        }
    }

    return false;

}


// procname으로 pid얻는 함수
int getPid(const char* procname) {

    HANDLE hSnapshot;
    PROCESSENTRY32 pe;
    int pid = 0;
    BOOL hResult;

    hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (INVALID_HANDLE_VALUE == hSnapshot) return 0;

    pe.dwSize = sizeof(PROCESSENTRY32);
    hResult = Process32First(hSnapshot, &pe);

    while (hResult) {
        if (strcmp(procname, pe.szExeFile) == 0) {
            pid = pe.th32ProcessID;
            break;
        }
        hResult = Process32Next(hSnapshot, &pe);
    }

    CloseHandle(hSnapshot);
    return pid;
}


int main(void) {
    
    char pName[64]={0};
    
    while (1) {
        //권한 상승시킬 프로세스의 pid를 입력하셈
        printf("\n높은 권한으로 실행할 프로세스 경로 입력 (종료는 ctrl+C) > ");
        scanf_s("%s", pName, sizeof(pName));

        if (ShellExcuteFunc(NULL, (LPTSTR)pName, 0)) {
            printf("\nShellExcuteFunc 성공\n");
        }
        else {
            printf("\nShellExcuteFunc 실패 %d\n", GetLastError());
        }

        int pPid = getPid(pName);
        if (levelup(pPid)) {
            printf("\nlevelup 성공\n");
        }
        else {
            printf("\nlevelup 실패 %d\n", GetLastError());
        }
    }

    return 0;
}